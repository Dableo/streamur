
app path structure:
	- index.html
	- stream.js
	- stream/
		- main.js
		- view/
			- forms
			- display markup
	- lib/
		- require
		- documentReady
		- eventEmitter

we need:
	stream.js
		no game logic, only instantiation
		makes a game wherever there is a game class and passes it its parent node

	Main.js
		load modules
		all DOM interaction in here, listeners attached to relevant modules
			keyboard input -> BeatBox
			form creation -> settings

	Input
		listens for keyboard, emits it with standard name
		currently only need tap
		needs form component that generates controls
		listens to them and emits changed event

	Settings
		stores changed forms as values
		has some settings without a form representation
		ex: hitwindow timings

	NodeManager:
		listens for input
		creates new nodes
		gives them a deltaTime (remembers the last node for this)
		runs them through a bunch of processing modules, ending with putting them in the graph

	Nodes:
		deltaTime (since last node)
		maybe that's all?
		might want unstable rate (delta - avgDelta)

	NodeGraph:
		holds nodes
		has methods to perform operations on the graph


	Statistics
		averager:
			tracks avgDelta of all nodes and avgDelta of last n nodes
			gets graph to trim history if the avgDelta of recent nodes is different than the whole history, thus starting fresh
			gets unstable rate: node.delta - avgDelta (the ideal delta)
		tracks information used for display
		avg bpm (derived from avgDelta)
		avg unstable rate


//style
ModuleCapitalisation
componentCapitalisation